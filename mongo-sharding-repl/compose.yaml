services:
  configSrv:
    image: mongo:latest
    container_name: configSrv
    restart: always
    ports:
      - 27017:27017
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - config-data:/data/db
    command: [
      "--configsvr",
      "--replSet",
      "config_server",
      "--bind_ip_all",
      "--port",
      "27017"
    ]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s
  shard1:
    image: mongo:latest
    container_name: shard1
    restart: always
    ports:
      - 27018:27018
    networks:
      app-network:
        ipv4_address: 173.17.0.9
    volumes:
      - shard1-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s
  shard1_repl1:
    image: mongo:latest
    container_name: shard1_repl1
    restart: always
    ports:
      - 27016:27016
    networks:
      app-network:
        ipv4_address: 173.17.0.11
    volumes:
      - shard1-repl1-data:/data/db
    command:
      [
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27016"
      ]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s
  shard1_repl2:
    image: mongo:latest
    container_name: shard1_repl2
    restart: always
    ports:
      - 27015:27015
    networks:
      app-network:
        ipv4_address: 173.17.0.12
    volumes:
      - shard1-repl2-data:/data/db
    command:
      [
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27015"
      ]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s
  shard2:
    image: mongo:latest
    container_name: shard2
    restart: always
    ports:
      - 27019:27019
    networks:
      app-network:
        ipv4_address: 173.17.0.8
    volumes:
      - shard2-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27019"
      ]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  shard2_repl1:
    image: mongo:latest
    container_name: shard2_repl1
    restart: always
    ports:
      - 27014:27014
    networks:
      app-network:
        ipv4_address: 173.17.0.14
    volumes:
      - shard2-repl1-data:/data/db
    command:
      [
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27014"
      ]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  shard2_repl2:
    image: mongo:latest
    container_name: shard2_repl2
    restart: always
    ports:
      - 27013:27013
    networks:
      app-network:
        ipv4_address: 173.17.0.13
    volumes:
      - shard2-repl2-data:/data/db
    command:
      [
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27013"
      ]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s


  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - 27020:27020
    networks:
      app-network:
        ipv4_address: 173.17.0.7
    command: [
      "mongos",
      "--configdb",
      "config_server/configSrv:27017",
      "--bind_ip_all",
      "--port",
      "27020"
    ]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  pymongo_api:
    container_name: pymongo_api
    build:
      context: api_app
      dockerfile: Dockerfile
    depends_on:
      - mongos_router
    ports:
      - 8080:8080
    networks:
      - app-network
    environment:
      MONGODB_URL: "mongodb://173.17.0.7:27020"
      MONGODB_DATABASE_NAME: "somedb"


networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

volumes:
  config-data:
  shard1-data:
  shard1-repl1-data:
  shard1-repl2-data:
  shard2-data:
  shard2-repl1-data:
  shard2-repl2-data:
